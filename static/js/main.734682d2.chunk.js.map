{"version":3,"sources":["logo.svg","components/navbar.js","components/intro.js","pages/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","Fragment","class","id","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","Component","Intro","Home","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oKAAAA,EAAOC,QAAU,IAA0B,kC,kJCmE5BC,G,sLA9DX,OACE,kBAAC,IAAMC,SAAP,KACE,yBACEC,MAAM,0DACNC,GAAG,WAEH,yBAAKD,MAAM,aACT,uBAAGA,MAAM,yBAAyBE,KAAK,aAAvC,qBAGA,4BACEF,MAAM,2BACNG,KAAK,SACLC,cAAY,WACZC,cAAY,iBACZC,gBAAc,gBACdC,gBAAc,QACdC,aAAW,qBAEX,+BACA,+BACA,gCAEF,yBACER,MAAM,+CACNC,GAAG,iBAEH,wBAAID,MAAM,cACR,wBAAIA,MAAM,YACR,uBAAGA,MAAM,4BAA4BE,KAAK,SAA1C,SAIF,wBAAIF,MAAM,YACR,uBAAGA,MAAM,qBAAqBE,KAAK,UAAnC,aAIF,wBAAIF,MAAM,YACR,uBAAGA,MAAM,qBAAqBE,KAAK,YAAnC,cAIF,wBAAIF,MAAM,YACR,uBAAGA,MAAM,qBAAqBE,KAAK,SAAnC,YAIF,wBAAIF,MAAM,YACR,uBAAGA,MAAM,qBAAqBE,KAAK,YAAnC,qB,GAnDGO,cC+BNC,E,iLA7BX,OACE,kBAAC,IAAMX,SAAP,KACE,yBACEE,GAAG,OACHD,MAAM,wBAGN,yBAAKA,MAAM,iBACX,yBAAKA,MAAM,+BACT,yBAAKA,MAAM,cACT,yBAAKA,MAAM,aACT,wBAAIA,MAAM,+BAAV,qBACA,uBAAGA,MAAM,kBACP,yCACA,0BAAMA,MAAM,qBAAZ,iEAIA,4BAAQA,MAAM,0B,GApBZS,aCYLE,E,iLATP,OACI,kBAAC,IAAMZ,SAAP,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALGU,aCSJG,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.734682d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from \"react\";\r\nimport \"../css/style.css\"\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <nav\r\n          class=\"navbar navbar-b navbar-trans navbar-expand-md fixed-top\"\r\n          id=\"mainNav\"\r\n        >\r\n          <div class=\"container\">\r\n            <a class=\"navbar-brand js-scroll\" href=\"#page-top\">\r\n              Anusorn Mennakred\r\n            </a>\r\n            <button\r\n              class=\"navbar-toggler collapsed\"\r\n              type=\"button\"\r\n              data-toggle=\"collapse\"\r\n              data-target=\"#navbarDefault\"\r\n              aria-controls=\"navbarDefault\"\r\n              aria-expanded=\"false\"\r\n              aria-label=\"Toggle navigation\"\r\n            >\r\n              <span></span>\r\n              <span></span>\r\n              <span></span>\r\n            </button>\r\n            <div\r\n              class=\"navbar-collapse collapse justify-content-end\"\r\n              id=\"navbarDefault\"\r\n            >\r\n              <ul class=\"navbar-nav\">\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link js-scroll active\" href=\"#home\">\r\n                    Home\r\n                  </a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link js-scroll\" href=\"#about\">\r\n                    About Me\r\n                  </a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link js-scroll\" href=\"#service\">\r\n                    Framework\r\n                  </a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link js-scroll\" href=\"#work\">\r\n                    Project\r\n                  </a>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                  <a class=\"nav-link js-scroll\" href=\"#contact\">\r\n                    Contact\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar","import React, { Component } from \"react\";\r\nimport \"../css/style.css\";\r\n\r\nclass Intro extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div\r\n          id=\"home\"\r\n          class=\"intro route bg-image\"\r\n        //   style={background-image: url(img/intro-bg.jpg)}\r\n        >\r\n          <div class=\"overlay-itro\"></div>\r\n          <div class=\"intro-content display-table\">\r\n            <div class=\"table-cell\">\r\n              <div class=\"container\">\r\n                <h1 class=\"typewriter intro-title mb-4\">Anusorn Mennakred</h1>\r\n                <p class=\"intro-subtitle\">\r\n                  <strong>I am </strong>\r\n                  <span class=\"text-slider-items\">\r\n                    Web Designer,Frontend Developer,Graphic\r\n                    Designer,Photographer\r\n                  </span>\r\n                  <strong class=\"text-slider\"></strong>\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Intro;\r\n","import React, { Component } from \"react\";\r\nimport Mynavbar from \"../components/navbar\"\r\nimport Intro from \"../components/intro\"\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return(\r\n            <React.Fragment>\r\n                <Mynavbar/>\r\n                <Intro/>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from \"./pages/home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}